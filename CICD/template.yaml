AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CI/CD Pipeline for maya.io

Parameters:
  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: maya.k
  
  GitHubOwner:
    Type: String
    Description: privateGenish
  
  GitHubBranch:
    Type: String
    Description: GitHub branch to track
    Default: master
  
  StackName:
    Type: String
    Description: Name of the SAM stack to deploy
    Default: mayaio
  
  GitHubToken:
    Type: String
    Description: GitHub personal access token
    NoEcho: true
    Default: dummy-token

Resources:
  # ECR Repository for N8N Docker images
  N8NRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: maya-n8n
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 7
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # S3 Bucket for artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-pipeline-artifacts"
      VersioningConfiguration:
        Status: Enabled

  # Docker Build Project
  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-docker-build"
      ServiceRole: !GetAtt DockerBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref N8NRepository
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-8)
                - IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo "Checking for changes in n8n-image directory..."
                - |
                  # Hash-based change detection using artifacts
                  echo "Calculating hash of n8n-image directory..."
                  export CURRENT_HASH=$(find n8n-image -type f -exec md5sum {} \; 2>/dev/null | sort -k 2 | md5sum | awk '{print $1}')
                  echo "Current n8n-image hash: $CURRENT_HASH"
                  
                  # Try to get previous hash from S3 artifacts
                  export BUCKET_NAME="mayaio-cicd-pipeline-artifacts"
                  echo "Checking for previous build hash in bucket: $BUCKET_NAME"
                  if aws s3 cp s3://$BUCKET_NAME/n8n-image-hash.txt previous-hash.txt 2>/dev/null; then
                    LAST_HASH=$(cat previous-hash.txt)
                    echo "Previous n8n-image hash: $LAST_HASH"
                  else
                    LAST_HASH="none"
                    echo "No previous build hash found - first build or new deployment"
                  fi
                  
                  # Compare hashes and set SHOULD_BUILD
                  if [ "$CURRENT_HASH" != "$LAST_HASH" ]; then
                    if [ "$LAST_HASH" = "none" ]; then
                      echo "No previous build found - build required"
                    else
                      echo "Hash changed - build required"
                    fi
                    export SHOULD_BUILD=true
                  else
                    echo "Hash unchanged - skipping build"
                    export SHOULD_BUILD=false
                  fi
            build:
              commands:
                - echo Build started on `date`
                - |
                  if [ "$SHOULD_BUILD" = "true" ]; then
                    echo "Building the Docker image with cache..."
                    cd n8n-image
                    
                    # Try to pull cache from S3
                    CACHE_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:cache"
                    echo "Attempting to pull cache image: $CACHE_IMAGE"
                    if docker pull $CACHE_IMAGE 2>/dev/null; then
                      echo "Cache image pulled successfully"
                      docker build --cache-from $CACHE_IMAGE -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                    else
                      echo "No cache image found, building without cache"
                      docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                    fi
                    
                    docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI
                    docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $CACHE_IMAGE
                    echo "Docker build completed"
                  else
                    echo "Skipping Docker build - no changes detected"
                  fi
            post_build:
              commands:
                - echo Build completed on `date`
                - cd $CODEBUILD_SRC_DIR
                - echo "Debug - SHOULD_BUILD=$SHOULD_BUILD, CURRENT_HASH=$CURRENT_HASH, BUCKET_NAME=$BUCKET_NAME"
                - |
                  if [ "$SHOULD_BUILD" = "true" ]; then
                    if docker images $IMAGE_REPO_NAME:$IMAGE_TAG --format "table {{.Repository}}:{{.Tag}}" | grep -q $IMAGE_REPO_NAME:$IMAGE_TAG; then
                      echo "Docker image exists, pushing to ECR..."
                      docker push $IMAGE_URI
                      
                      # Push cache image for future builds
                      CACHE_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:cache"
                      echo "Pushing cache image: $CACHE_IMAGE"
                      docker push $CACHE_IMAGE
                      
                      echo "Writing image definitions file..."
                      printf '{"ImageUri":"%s"}' $IMAGE_URI > imageDetail.json
                      echo "Storing current hash for future builds..."
                      echo $CURRENT_HASH > n8n-image-hash.txt
                      aws s3 cp n8n-image-hash.txt s3://$BUCKET_NAME/n8n-image-hash.txt
                    else
                      echo "Docker image build failed, creating default artifact..."
                      printf '{"ImageUri":"maya.io/n8n:latest"}' > imageDetail.json
                    fi
                  else
                    echo "No Docker build needed, getting latest image from ECR..."
                    LATEST_TAG=$(aws ecr describe-images --repository-name $IMAGE_REPO_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text 2>/dev/null || echo "latest")
                    if [ "$LATEST_TAG" != "None" ] && [ "$LATEST_TAG" != "latest" ]; then
                      LATEST_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$LATEST_TAG"
                      echo "Using existing ECR image: $LATEST_URI"
                    else
                      echo "No images found in ECR, using current commit tag as fallback"
                      LATEST_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
                    fi
                    printf '{"ImageUri":"%s"}' $LATEST_URI > imageDetail.json
                  fi
                - echo "Artifact file contents:"
                - cat imageDetail.json
                - ls -la imageDetail.json
          artifacts:
            files:
              - imageDetail.json

  # CodeBuild Project
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-build"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${N8NRepository}"
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECR_REPO_NAME
            Value: !Ref N8NRepository
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.13
            pre_build:
              commands:
                - echo Build started on `date`
            build:
              commands:
                - sam build --use-container
                - echo "Determining Docker image URI for SAM package..."
                - |
                  # First try to read from DockerBuild artifact
                  if [ -f "../DockerOutput/imageDetail.json" ]; then
                    echo "Found DockerBuild artifact, reading imageDetail.json..."
                    DOCKER_IMAGE_URI=$(cat "../DockerOutput/imageDetail.json" | grep -o '"ImageUri":"[^"]*' | cut -d'"' -f4)
                    if [ -n "$DOCKER_IMAGE_URI" ] && [ "$DOCKER_IMAGE_URI" != "maya.io/n8n:latest" ]; then
                      echo "Using Docker image URI from DockerBuild: $DOCKER_IMAGE_URI"
                      FULL_IMAGE_URI="$DOCKER_IMAGE_URI"
                    else
                      echo "DockerBuild used fallback, determining actual image..."
                      FULL_IMAGE_URI=""
                    fi
                  else
                    echo "No DockerBuild artifact found, determining image..."
                    FULL_IMAGE_URI=""
                  fi
                  
                  # Fallback logic if no valid URI from DockerBuild
                  if [ -z "$FULL_IMAGE_URI" ]; then
                    IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-8)
                    FULL_IMAGE_URI="$ECR_REPOSITORY_URI:$IMAGE_TAG"
                    
                    # Check if this tag exists in ECR, if not get latest
                    if ! aws ecr describe-images --repository-name $ECR_REPO_NAME --image-ids imageTag=$IMAGE_TAG >/dev/null 2>&1; then
                      echo "Tag $IMAGE_TAG not found, getting latest image from ECR..."
                      LATEST_TAG=$(aws ecr describe-images --repository-name $ECR_REPO_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
                      if [ "$LATEST_TAG" != "None" ] && [ -n "$LATEST_TAG" ]; then
                        FULL_IMAGE_URI="$ECR_REPOSITORY_URI:$LATEST_TAG"
                        echo "Using latest tag from ECR: $LATEST_TAG"
                      else
                        echo "No images found in ECR, using default"
                        FULL_IMAGE_URI="$ECR_REPOSITORY_URI:latest"
                      fi
                    else
                      echo "Using commit SHA tag: $IMAGE_TAG"
                    fi
                  fi
                  
                  echo "Final image URI for SAM package: $FULL_IMAGE_URI"
                - sam package --resolve-s3 --image-repository $FULL_IMAGE_URI --output-template-file packaged-template.yaml
            post_build:
              commands:
                - echo Build completed on `date`
          artifacts:
            files:
              - packaged-template.yaml

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: DockerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref DockerBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: DockerOutput
            - Name: SAMBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
                PrimarySource: SourceOutput
              InputArtifacts:
                - Name: SourceOutput
                - Name: DockerOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref StackName
                TemplatePath: BuildOutput::packaged-template.yaml
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CloudFormationRole.Arn
                ParameterOverrides: |
                  {
                    "ImageUri": { "Fn::GetParam" : [ "DockerOutput", "imageDetail.json", "ImageUri" ] }
                  }
              InputArtifacts:
                - Name: BuildOutput
                - Name: DockerOutput

  # IAM Roles
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:CreateBucket
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: 
                  - !Sub "${ArtifactsBucket.Arn}/*"
                  - !Sub "${ArtifactsBucket.Arn}"
                  - "arn:aws:s3:::aws-sam-cli-managed-default-*"
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:GetAuthorizationToken
                Resource: 
                  - !GetAtt N8NRepository.Arn
                  - "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"

  DockerBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DockerBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${ArtifactsBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImages
                Resource: 
                  - !GetAtt N8NRepository.Arn
                  - "*"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub "${ArtifactsBucket.Arn}/*"
                  - !GetAtt ArtifactsBucket.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: 
                  - !GetAtt BuildProject.Arn
                  - !GetAtt DockerBuildProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - iam:PassRole
                Resource: '*'

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: IAMPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:*
                Resource: '*'

Outputs:
  PipelineName:
    Description: Name of the CodePipeline
    Value: !Ref Pipeline
  
  ArtifactsBucket:
    Description: S3 Bucket for pipeline artifacts
    Value: !Ref ArtifactsBucket